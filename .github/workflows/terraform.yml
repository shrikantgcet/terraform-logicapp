name: Azure Terraform

on:
  push:
    branches:
      - main
  
    paths:
      - 'terraform/**'
      - '.github/workflows/**'
  workflow_dispatch: #this attribute will enable the manual run to the pipeline
  
env:
  TERRAFORM_WORKING_DIRECTORY: "terraform"
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
  BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
  BACKEND_STORAGE_CONTAINER_NAME: ${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}
  

jobs:

  Terraform-Build-Pipeline:
    runs-on: ubuntu-latest
    outputs:
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}
      function_name: ${{ steps.apply.outputs.function_name }}
    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5
        terraform_wrapper: false

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
          -backend-config="key=$TF_BACKEND_KEY"
        echo 'Terraform Init completed successfully'
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_USE_OIDC: true
      working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

    - id: plan
      name: Terraform Plan
      working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
      run: |
        terraform plan
        echo $resource_group_name
        resource_group_name=$(terraform output -raw resource_group_name)
        echo 'Terraform Plan completed successfully'


  Terraform-Deploy-Pipeline:
    runs-on: ubuntu-latest
    needs: [Terraform-Build-Pipeline]
    environment: dev
    outputs:
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}
      function_name: ${{ steps.apply.outputs.function_name }}
    steps:
    - uses: actions/checkout@v3
    - id: apply
      name: Terraform apply
      env:
        TF_VAR_application_name: ${{ env.APPLICATION_NAME }}
        TF_VAR_environment_name: ${{ env.ENVIRONMENT_NAME }}
        TF_BACKEND_KEY: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT_NAME }}
      working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
      run: |
        terraform init \
          -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
          -backend-config="key=$TF_BACKEND_KEY"
        
        #terraform apply --auto-approve
        terraform destroy --auto-approve # this is required if we have to delete any resource
        
        echo 'Terraform Plan completed successfully'